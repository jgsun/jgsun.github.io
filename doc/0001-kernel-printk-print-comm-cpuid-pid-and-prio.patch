From a19fde81d60c02bc5a186454783367bfb7c705a6 Mon Sep 17 00:00:00 2001
From: jgsun <jianguo_sun@hotmail.com>
Date: Sat, 18 Jul 2020 16:51:05 +0800
Subject: [PATCH 1/2] kernel: printk: print comm, cpuid, pid and prio

The output stytle is:

[ 0.000000] ( swapper-0 [00] 20) Booting Linux on physical CPU 0x0000000000 [0x411fd070]
[ 0.000000] ( swapper-0 [00] 20) Linux version 5.6.11 (jgsun@VirtualBox) (gcc version 9.2.1 20191025 (GNU Toolchain for the A-profile Architecture 9.2-2019.12 (arm-9.10))) #2 SMP Sat Jul 18 15:08:23 CST 2020
[ 0.000000] ( swapper-0 [00] 20) Machine model: linux,dummy-virt
[ 0.000000] ( swapper-0 [00] 20) efi: Getting EFI parameters from FDT:
[ 0.000000] ( swapper-0 [00] 20) efi: UEFI not found.
[ 0.000000] ( swapper-0 [00] 20) On node 0 totalpages: 131072
[ 0.000000] ( swapper-0 [00] 20) DMA zone: 2048 pages used for memmap
[ 0.000000] ( swapper-0 [00] 20) DMA zone: 0 pages reserved
[ 0.000000] ( swapper-0 [00] 20) DMA zone: 131072 pages, LIFO batch:31
[ 0.000000] ( swapper-0 [00] 20) psci: probing for conduit method from DT.
[ 0.000000] ( swapper-0 [00] 20) psci: PSCIv0.2 detected in firmware.
[ 0.000000] ( swapper-0 [00] 20) psci: Using standard PSCI v0.2 function IDs
[ 0.000000] ( swapper-0 [00] 20) psci: Trusted OS migration not required
---
 .../admin-guide/kernel-parameters.txt         | 12 ++++++
 kernel/printk/printk.c                        | 40 +++++++++++++++++--
 lib/Kconfig.debug                             | 38 ++++++++++++++++++
 3 files changed, 87 insertions(+), 3 deletions(-)

diff --git a/Documentation/admin-guide/kernel-parameters.txt b/Documentation/admin-guide/kernel-parameters.txt
index 20aac805e197..ddf252b2fc38 100644
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@ -3776,6 +3776,18 @@
 	printk.time=	Show timing data prefixed to each printk message line
 			Format: <bool>  (1/Y/y=enable, 0/N/n=disable)
 
+	printk.cpu_id=	Show cpu id prefixed to each printk message line
+			Format: <bool>  (1/Y/y=enable, 0/N/n=disable)
+
+	printk.pid=	Show task pid prefixed to each printk message line
+			Format: <bool>  (1/Y/y=enable, 0/N/n=disable)
+
+	printk.prio=	Show task priority prefixed to each printk message line
+			Format: <bool>  (1/Y/y=enable, 0/N/n=disable)
+
+	printk.comm=	Show task name prefixed to each printk message line
+			Format: <bool>  (1/Y/y=enable, 0/N/n=disable)
+
 	processor.max_cstate=	[HW,ACPI]
 			Limit processor to maximum C-state
 			max_cstate=9 overrides any DMI blacklist limit.
diff --git a/kernel/printk/printk.c b/kernel/printk/printk.c
index 74fbd76cf664..d3ec4f844ca1 100644
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -612,6 +612,20 @@ static u32 truncate_msg(u16 *text_len, u16 *trunc_msg_len,
 	return msg_used_size(*text_len + *trunc_msg_len, 0, pad_len);
 }
 
+#if defined(CONFIG_PRINTK_TASK_PRIO)
+static bool printk_prio = true;
+#else
+static bool printk_prio;
+#endif
+module_param_named(prio, printk_prio, bool, S_IRUGO | S_IWUSR);
+
+#if defined(CONFIG_PRINTK_COMM)
+static bool printk_comm = true;
+#else
+static bool printk_comm;
+#endif
+module_param_named(comm, printk_comm, bool, S_IRUGO | S_IWUSR);
+
 /* insert record into the buffer, discard old ones, update heads */
 static int log_store(u32 caller_id, int facility, int level,
 		     enum log_flags flags, u64 ts_nsec,
@@ -619,11 +633,29 @@ static int log_store(u32 caller_id, int facility, int level,
 		     const char *text, u16 text_len)
 {
 	struct printk_log *msg;
-	u32 size, pad_len;
+	u32 size, pad_len, prefix_len = 0;
 	u16 trunc_msg_len = 0;
+	char prefix[TASK_COMM_LEN + 20];
+
+	if (printk_comm) {
+		char temp[8];
+
+		prefix_len += sprintf(prefix, "(%16s-", current->comm);
+
+		sprintf(temp, "%-5u", task_pid_nr(current));
+		prefix_len += sprintf(prefix + prefix_len, "%s", temp);
+
+		sprintf(temp, " [%02u] ", smp_processor_id());
+		prefix_len += sprintf(prefix + prefix_len, "%s", temp);
+
+		if (printk_prio)
+			prefix_len += sprintf(prefix + prefix_len, "%4d) ",
+						task_prio(current));
+	}
 
 	/* number of '\0' padding bytes to next message */
 	size = msg_used_size(text_len, dict_len, &pad_len);
+	size += prefix_len;
 
 	if (log_make_free_space(size)) {
 		/* truncate the message if it is too long for empty buffer */
@@ -646,8 +678,10 @@ static int log_store(u32 caller_id, int facility, int level,
 
 	/* fill message */
 	msg = (struct printk_log *)(log_buf + log_next_idx);
-	memcpy(log_text(msg), text, text_len);
-	msg->text_len = text_len;
+	if (prefix_len)
+		memcpy(log_text(msg), prefix, prefix_len);
+	memcpy(log_text(msg) + prefix_len, text, text_len);
+	msg->text_len = prefix_len + text_len;
 	if (trunc_msg_len) {
 		memcpy(log_text(msg) + text_len, trunc_msg, trunc_msg_len);
 		msg->text_len += trunc_msg_len;
diff --git a/lib/Kconfig.debug b/lib/Kconfig.debug
index ab9af2e052ca..2d563cb9a6b8 100644
--- a/lib/Kconfig.debug
+++ b/lib/Kconfig.debug
@@ -18,6 +18,44 @@ config PRINTK_TIME
 	  The behavior is also controlled by the kernel command line
 	  parameter printk.time=1. See Documentation/admin-guide/kernel-parameters.rst
 
+config PRINTK_COMM
+        bool "Show comm on printks"
+        depends on PRINTK
+        select PRINTK_CPU_ID
+        select PRINTK_PID
+        help
+          Selecting this option causes current task's comm to be
+          included in printk output. Or add printk.comm=1 at boot-time.
+          This allows you to see the running process name with kernel log.
+          See Documentation\admin-guide\kernel-parameters.txt
+
+config PRINTK_CPU_ID
+        bool "Show cpu id on printks"
+        depends on PRINTK && SMP && PRINTK_COMM
+        help
+          Selecting this option causes current printk cpu id to be
+          included in printk output. Or add printk.cpu=1 at boot-time.
+          This allows you to see the running cpu id with kernel log.
+          See Documentation\admin-guide\kernel-parameters.txt
+
+config PRINTK_PID
+        bool "Show pid on printks"
+        depends on PRINTK && PRINTK_COMM
+        help
+          Selecting this option causes current task's pid to be
+          included in printk output. Or add printk.pid=1 at boot-time.
+          This allows you to see the running process id with kernel log.
+          See Documentation\admin-guide\kernel-parameters.txt
+
+config PRINTK_TASK_PRIO
+        bool "  Show task's priority on printks"
+        depends on PRINTK && PRINTK_COMM
+        help
+          Selecting this option causes current task's priority to be
+          included in printk output. Or add printk.prio=1 at boot-time.
+          This allows you to see the running process id with kernel log.
+          See Documentation\admin-guide\kernel-parameters.txt
+
 config PRINTK_CALLER
 	bool "Show caller information on printks"
 	depends on PRINTK
-- 
2.25.1

